@page "/tickets"
@using Diplom.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Diplom.Client.Auth.CustomAuthStateProvider AuthProvider

<AuthorizeView>
    <Authorized>
        <button class="btn btn-outline-danger mb-3" @onclick="Logout">Вийти</button>
    </Authorized>
</AuthorizeView>

<h3>Список тікетів</h3>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (tickets == null || !tickets.Any())
{
    <div class="text-center mt-5">
        <p class="text-muted">Немає тікетів для відображення</p>
    </div>
}
else
{
    <div class="d-flex flex-wrap gap-3 justify-content-start mt-4">
        @foreach (var ticket in tickets)
        {
            <div class="card ticket-card" style="width: 18rem;">
                <div class="card-body d-flex flex-column justify-content-between">
                    <div>
                        <h5 class="card-title">@ticket.Title</h5>
                        <p class="card-text description-text">@ticket.Description</p>
                    </div>
                    <button class="btn btn-primary mt-3" @onclick="@(() => OpenTicket(ticket.Id))">Переглянути</button>
                </div>
            </div>
        }
    </div>
}

<style>
    .description-text {
        max-height: 3.6em; /* 2 рядки */
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .ticket-card {
        transition: all 0.3s ease-in-out;
    }

    .ticket-card:hover {
        transform: scale(1.02);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
</style>

@code {
    private List<Ticket> tickets;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tickets = await Http.GetFromJsonAsync<List<Ticket>>("api/tickets");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Logout()
    {
        await AuthProvider.Logout();
        Navigation.NavigateTo("/login");
    }

    private void OpenTicket(int id)
    {
        Navigation.NavigateTo($"/ticket/{id}");
    }
}
