@page "/tickets"
@inject Diplom.Client.Services.ApiService ApiService
@inject Services.ToastService ToastService
@using Diplom.Client.Shared.Models

<h3 class="mb-4">Створити запит або пропозицію допомоги</h3>

@if (tickets == null)
{
    <p>Завантаження...</p>
}
else
{
    <EditForm Model="newTicket" OnValidSubmit="HandleCreateTicket" class="card p-4 mb-4 shadow-sm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label>Категорія <span class="text-danger">*</span></label>
            <InputText @bind-Value="newTicket.Category" class="form-control" placeholder="Введіть категорію допомоги" />
        </div>

        <div class="form-group mb-3">
            <label>Локація <span class="text-danger">*</span></label>
            <InputText @bind-Value="newTicket.Location" class="form-control" placeholder="Введіть локацію" />
        </div>

        <div class="form-group mb-3">
            <label>Тип тікету <span class="text-danger">*</span></label>
            <InputSelect @bind-Value="newTicket.Type" class="form-control">
                <option value="">-- Виберіть тип --</option>
                <option value="Request">Потребую допомогу</option>
                <option value="Offer">Пропоную допомогу</option>
            </InputSelect>
        </div>

        <div class="form-group mb-3">
            <label>Заголовок</label>
            <InputText @bind-Value="newTicket.Title" class="form-control" placeholder="Короткий заголовок" />
        </div>

        <div class="form-group mb-3">
            <label>Опис</label>
            <InputTextArea @bind-Value="newTicket.Description" class="form-control" placeholder="Детальний опис вашої пропозиції або потреби" rows="3" />
        </div>

        <button type="submit" class="btn btn-success">Створити тікет</button>
    </EditForm>

    <div class="card p-3 mb-4">
        <h5>Фільтрація тікетів</h5>
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <select class="form-select" @bind="filterCategory">
                    <option value="">Всі категорії</option>
                    @foreach (var category in tickets.Select(t => t.Category).Distinct())
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
            <div class="col-auto">
                <select class="form-select" @bind="filterType">
                    <option value="">Всі типи</option>
                    <option value="Request">Потребую допомогу</option>
                    <option value="Offer">Пропоную допомогу</option>
                </select>
            </div>
        </div>
    </div>

    <h3>Список запитів/пропозицій</h3>
    <ul class="list-group">
        @foreach (var ticket in FilteredTickets)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@ticket.Category</strong> | @ticket.Location | @ticket.Type<br />
                    <em>@ticket.Title</em> - @ticket.Description
                </div>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTicket(ticket.Id)">Видалити</button>
            </li>
        }
    </ul>
}

@code {
    private List<Ticket> tickets;
    private Ticket newTicket = new Ticket();

    private string filterCategory = string.Empty;
    private string filterType = string.Empty;

    private IEnumerable<Ticket> FilteredTickets => tickets
        .Where(t => (string.IsNullOrEmpty(filterCategory) || t.Category == filterCategory) &&
                    (string.IsNullOrEmpty(filterType) || t.Type == filterType));

    protected override async Task OnInitializedAsync()
    {
        await LoadTicketsAsync();
    }

    private async Task LoadTicketsAsync()
    {
        var response = await ApiService.GetTicketsAsync();
        if (response.IsSuccessStatusCode)
        {
            tickets = await response.Content.ReadFromJsonAsync<List<Ticket>>();
        }
        else
        {
            tickets = new List<Ticket>();
        }
    }

    private async Task HandleCreateTicket()
    {
        var response = await ApiService.PostTicketAsync(newTicket);
        if (response.IsSuccessStatusCode)
        {
            await LoadTicketsAsync();
            newTicket = new Ticket();
            ToastService.ShowSuccess("Тікет успішно створено!");
        }
    }

    private async Task DeleteTicket(int ticketId)
    {
        var response = await ApiService.DeleteTicketAsync(ticketId);
        if (response.IsSuccessStatusCode)
        {
            await LoadTicketsAsync();
            ToastService.ShowSuccess("Тікет успішно видалено!");
        }
    }
}