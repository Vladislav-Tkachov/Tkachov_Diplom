@page "/tickets/{TicketId}/chat"
@inject Diplom.Client.Services.ChatService ChatService
@inject NavigationManager NavigationManager
@inject Diplom.Client.Services.ApiService ApiService
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS

<h3 class="text-center mb-4">Чат для тікету #@TicketId</h3>

@if (!connected)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 300px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Завантаження...</span>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="overflow-auto mb-3" style="height: 400px;" @ref="chatContainer">
                <ul class="list-unstyled">
                    @foreach (var (user, message, timestamp) in messages)
                    {
                        <li class="mb-3 animate__animated animate__fadeInUp">
                            @if (user == currentUser)
                            {
                                <div class="d-flex justify-content-end">
                                    <div class="bg-primary text-white p-2 rounded-3 shadow-sm" style="max-width: 70%;">
                                        <div class="small text-end">@timestamp.ToShortTimeString()</div>
                                        <div><strong>Я</strong>: @message</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-start">
                                    <div class="bg-light p-2 rounded-3 shadow-sm" style="max-width: 70%;">
                                        <div class="small text-start">@timestamp.ToShortTimeString()</div>
                                        <div><strong>@user</strong>: @message</div>
                                    </div>
                                </div>
                            }
                        </li>
                    }
                </ul>
            </div>
            <div class="input-group">
                <InputText class="form-control" placeholder="Введіть повідомлення..." @bind-Value="currentMessage" @onkeydown="HandleEnter" />
                <button class="btn btn-primary" @onclick="SendMessage">
                    <i class="bi bi-send"></i>
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string TicketId { get; set; }

    private List<(string User, string Message, DateTime Timestamp)> messages = new();
    private string currentMessage;
    private string currentUser;
    private bool connected = false;

    private ElementReference chatContainer;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        currentUser = authState.User.Identity?.Name ?? "Анонім";

        try
        {
            var history = await ApiService.GetChatHistoryAsync(TicketId);
            if (history != null)
            {
                foreach (var item in history)
                {
                    messages.Add((item.User, item.Message, item.Timestamp));
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка при отриманні історії: {ex.Message}");
        }

        await ChatService.StartConnectionAsync(NavigationManager.BaseUri);
        await ChatService.JoinTicketRoomAsync(TicketId);

        ChatService.OnMessageReceived += async (user, message) =>
        {
            messages.Add((user, message, DateTime.Now));
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        };

        connected = true;
        await ScrollToBottom();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(currentMessage))
        {
            await ChatService.SendMessageAsync(TicketId, currentUser, currentMessage);
            currentMessage = string.Empty;
            await ScrollToBottom();
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50);
        await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
    }

    public async ValueTask DisposeAsync()
    {
        await ChatService.LeaveTicketRoomAsync(TicketId);
    }
}
