@page "/tickets/{TicketId}/chat"
@inject Diplom.Client.Services.ChatService ChatService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS

<h3>Чат для волонтерів (Тікет: @TicketId)</h3>

<div class="card p-3 mb-3">
    <div class="mb-3">
        <InputText class="form-control" placeholder="Введіть повідомлення..." @bind-Value="currentMessage" @onkeydown="HandleEnter" />
    </div>
    <button class="btn btn-primary" @onclick="SendMessage">Відправити</button>
</div>

<div class="overflow-auto border p-3 mb-3" style="height: 300px;" @ref="chatContainer">
    <ul class="list-unstyled">
        @foreach (var (user, message) in messages)
        {
            <li class="mb-2">
                @if (user == currentUser)
                {
                    <div class="d-flex justify-content-end">
                        <div class="bg-primary text-white rounded p-2" style="max-width: 70%;">
                            <small><strong>Я:</strong> @message</small>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-start">
                        <div class="bg-light rounded p-2" style="max-width: 70%;">
                            <small><strong>@user:</strong> @message</small>
                        </div>
                    </div>
                }
            </li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public string TicketId { get; set; }

    private List<(string User, string Message)> messages = new();
    private string currentMessage;
    private string currentUser;

    private ElementReference chatContainer;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        currentUser = authState.User.Identity?.Name ?? "Анонім";

        await ChatService.StartConnectionAsync(NavigationManager.BaseUri);
        await ChatService.JoinTicketRoomAsync(TicketId);

        ChatService.OnMessageReceived += async (user, message) =>
        {
            messages.Add((user, message));
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        };
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(currentMessage))
        {
            await ChatService.SendMessageAsync(TicketId, currentUser, currentMessage);
            currentMessage = string.Empty;
            await ScrollToBottom();
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50);
        await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
    }

    public async ValueTask DisposeAsync()
    {
        await ChatService.LeaveTicketRoomAsync(TicketId);
    }
}