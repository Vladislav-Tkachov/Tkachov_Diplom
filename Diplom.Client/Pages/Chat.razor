@page "/chat/{TicketId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject Diplom.Client.Auth.CustomAuthStateProvider AuthProvider
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        <button class="btn btn-outline-danger" @onclick="Logout">Вийти</button>
    </Authorized>
</AuthorizeView>

<h3>Чат тікету @TicketId</h3>

<div class="input-group mb-3">
    <input @bind="messageInput" @ref="messageInputRef" class="form-control" placeholder="Ваше повідомлення..." @onkeydown="HandleEnterKey" />
    <button class="btn btn-success" @onclick="SendMessage">Надіслати</button>
</div>

<div class="mt-3" style="max-height: 400px; overflow-y: auto;" @ref="messagesContainerRef">
    @foreach (var (user, message) in messages)
    {
        <div class="alert alert-primary p-2 m-1">
            <strong>@user:</strong> @message
        </div>
    }
</div>

@code {
    [Parameter] public int TicketId { get; set; }

    private HubConnection hubConnection;
    private List<(string user, string message)> messages = new();
    private string messageInput = "";
    private string currentUserName = "Анонім";

    private ElementReference messageInputRef;
    private ElementReference messagesContainerRef;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            currentUserName = user.Identity.Name ?? "Користувач";
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", async (userName, message) =>
        {
            messages.Add((userName, message));
            await ScrollToBottom();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGroup", $"ticket-{TicketId}");
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", $"ticket-{TicketId}", currentUserName, messageInput);
            messageInput = "";
            await messageInputRef.FocusAsync();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainerRef);
    }

    private async Task Logout()
    {
        await AuthProvider.Logout();
        Navigation.NavigateTo("/login");
    }

    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveGroup", $"ticket-{TicketId}");
            await hubConnection.DisposeAsync();
        }
    }
}