@page "/chat/{TicketId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject Diplom.Client.CustomAuthStateProvider AuthProvider
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-outline-danger" @onclick="Logout">Вийти</button>
        </div>
    </Authorized>
</AuthorizeView>

<h3 class="text-center">Чат тікету №@TicketId</h3>

<div class="chat-container">
    <div class="messages-container" @ref="messagesContainerRef">
        @foreach (var (user, message) in messages)
        {
            <div class="alert alert-primary p-2 m-1">
                <strong>@user:</strong> @message
            </div>
        }
    </div>

    <div class="input-group mt-3">
        <input @bind="messageInput" @ref="messageInputRef" class="form-control" placeholder="Ваше повідомлення..." @onkeydown="HandleEnterKey" />
        <button class="btn btn-success" @onclick="SendMessage" disabled="@isSending">
            @if (isSending)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            else
            {
                <span>Надіслати</span>
            }
        </button>
    </div>
</div>

<style>
    .chat-container {
        max-width: 600px;
        margin: auto;
        margin-top: 20px;
        padding: 20px;
        background: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .messages-container {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 5px;
    }
</style>

@code {
    [Parameter] public int TicketId { get; set; }

    private HubConnection hubConnection;
    private List<(string user, string message)> messages = new();
    private string messageInput = "";
    private string currentUserName = "Анонім";
    private bool isSending = false;

    private ElementReference messageInputRef;
    private ElementReference messagesContainerRef;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUserName = user.Identity.Name ?? "Користувач";
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", async (userName, message) =>
        {
            messages.Add((userName, message));
            await ScrollToBottom();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGroup", $"ticket-{TicketId}");
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(messageInput))
        {
            isSending = true;
            await hubConnection.SendAsync("SendMessage", $"ticket-{TicketId}", currentUserName, messageInput);
            messageInput = "";
            await messageInputRef.FocusAsync();
            isSending = false;
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainerRef);
    }

    private async Task Logout()
    {
        await AuthProvider.MarkUserAsLoggedOut();
        Navigation.NavigateTo("/login");
    }

    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveGroup", $"ticket-{TicketId}");
            await hubConnection.DisposeAsync();
        }
    }
}
